import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from '@kubernetes/client-node';
import yaml from 'js-yaml';
import { Base64 } from 'js-base64';

export const getUserKubeConfig = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return yaml.load(config);
};

export const getLocalAdminKubeConfig = () => {
  const config: string | undefined = process.env.ADMINTOKEN;
  // console.log('base64 config:', config);
  if (!config) {
    throw new Error('KUBECONFIG environment variable is not defined');
  }
  // console.log('config:', Base64.decode(config));
  return Base64.decode(config);
};

export const getUserKubeConfigMock = () => {
  const temp = `apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJMU1Ea3lPREV4TlRBME5Gb1lEekl4TWpVd09UQTBNVEUxTURRMFdqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnFBWVZ0S3ZzeGxzRXdCVHk5d1hnaGtrOHRobTA4ZkpxQm1hSnRxN3QwaUhLbkJuT2RCdVF1enZqNk43Uk5SWVEKZ0V2bDFJTUZzWFp1VWNEbUNKYWtxQnAzZktGN3hEdVRTNzQwOVVCYk1RSmJXbnZZZ240ZzdiRXlMaWVnMGRxVwpKanV5MlBvK2JqMm9rNWt6cnFGNW5tUXVzUWNIZjlmSExZV0tnT0xFb0xEU1h3bFRLV2dneUh0RjR6RCtCUUZ6CnZXTmhlc0RGM0hsSUk1ZGloNWFiR2VEdllQaHZCaytaWDMyOC9zSi8yYXUwVWpNTW5IdXNuV0JSbURncDVGR3kKVCtjMnBNRHY3dFB1bDNUQllKNlRkQXNxdUJndUNHWWlTV3pFelg2VDRhOFUyUDBPTElwOU0reTM3OHB4YWc4eQpmNGUvcTc2bWZneG9BTUFzTkVqL3Z3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVYdmxFNUNGTFRTRUFZYXNmR0hibnlOeXYvYkl3RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFKaTdSVmpiSEs2TjhpZUxzME0yUGo1RExRYzZrSEdYK0E3MUpGckk3dHE0Y3BJLwpXU05URzhpQ0FBaDZaTUZmaDZmemFjWElNd0srTmdSd1lKcVgvVU1lR3RBM1JaR1pNTXY2QVBLU3BacGxabXptCm1UK3VXNVFlREJZaXBhL29IdS9IYkh6eEhpdEpOTTZMWlRNcmlQVzNxZHN5WXptdmlhMitaSlZkejhKYXdaQjAKVmV0cy85WHNNdklpdzgxMU1mVXJVMzhWbUd6TFZELzdzeFVSM2ZTdEQreDNUdWV6Y3ZtZ0kxczh4MGFOekVmTwo0a0ZqYTdNTGZXWCtPSE1tVjk3d2VKNC9hT05KSk94YVFUVzY5YmJOWndzREUrYUhZUWJRcnZ2Zzk1czZyM29QCkJaWVcxZDJ2YUp6ZXFvVU5MaUo2YzZ4aURVMFprcEJ6YjhnWHNkZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    server: https://192.168.31.39:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJTnlLbW5LWUwvUWd3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TlRBNU1qZ3hNVFV3TkRSYUdBOHlNVEkxTURrd05ERXhOVEEwT0ZvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRDFqdCttMk41dEJabE8Ka2UreE81Q2NyVmpLckpFaTNiZmkzYW1FZTRXZ0JCYU9hdW8vUWlHTHJlRGkwdHFiR0JwbUExSVBJUmZFSlVEQwplVTZLMTY4UzgyNWRTM3pabVdiRWZJaDRnc1BpbG1oTk00Zk8vYXUzRWR0Qm9TbnBjakpKTVd6MUQvL1R5a2dSClBMb3B0Q1JBdzJNTHgwZnRGQmV3QkJUVE1jZCt1c1hkUE8vaFFQbkJJY1pqTlJnQnorK3VCMlIyTHkyOEJkb0gKTUVBdmhpTFowWk9Id1JDazN5a1I2NEgwR3huMXNIdlZ5TThhOThsUWduMkp5VFFOUVkwc2lEL2Z1bUdvN3FxVApBTmlLN0JWSVVQb1lId242K080Q0Y4NXBuaExhTnI1RGhFZ0E5VUVQUTdpSGUxZFZNL29HTlRMVDI5cks3SGJrCmlyUi9KSnpwQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlJlK1VUa0lVdE5JUUJocXg4WWR1ZkkzSy85c2pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFlK3haQVcrK0JqbEIyYUVIZjNDWDYxeThvMkxNYTVhR3RBZWZBZmJCclpaTldjZVlpMVE5Cms3NTA0YkdVM1Rad25oRm1UdzY3emEwNFYvdmdFbkdaVjhrNXhGZ05WZ3FtZk9ONWFxQWhTZGpYNThVRG9Bd0gKbXh2RldrMytTVHhMUG9ERWV3OStsc1R3RzJtSVpucUduaHBWMmpWTm8wNnZyUzY5d1ZCN3B5ZGlNMHNrT0kvYwpCMWRQUklJcE5ZVm5jVmlnSGQrSCtYdmEySTVlZEVPdUptM2RsRUlINW81U2JjbnZYSll3U2pXcjhxZThqbEorCkZjV01CT0prcFlCc0l1TE16cjd6NjhSMDdOb3psR1NoTlBGa211Z3JPZjR6c0xZRjFiTnZQZlBIajNjWURNTUoKdnBUMEFPeFNsUnA1YWtic2tOU0hWYk9JTlZVaHlxMGhHQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBOVk3ZnB0amViUVdaVHBIdnNUdVFuSzFZeXF5Ukl0MjM0dDJwaEh1Rm9BUVdqbXJxClAwSWhpNjNnNHRMYW14Z2FaZ05TRHlFWHhDVkF3bmxPaXRldkV2TnVYVXQ4MlpsbXhIeUllSUxENHBab1RUT0gKenYycnR4SGJRYUVwNlhJeVNURnM5US8vMDhwSUVUeTZLYlFrUU1OakM4ZEg3UlFYc0FRVTB6SEhmcnJGM1R6dgo0VUQ1d1NIR1l6VVlBYy92cmdka2RpOHR2QVhhQnpCQUw0WWkyZEdUaDhFUXBOOHBFZXVCOUJzWjliQjcxY2pQCkd2ZkpVSUo5aWNrMERVR05MSWcvMzdwaHFPNnFrd0RZaXV3VlNGRDZHQjhKK3ZqdUFoZk9hWjRTMmphK1E0UkkKQVBWQkQwTzRoM3RYVlRQNkJqVXkwOXZheXV4MjVJcTBmeVNjNlFJREFRQUJBb0lCQUcxMjdtNXpXTndpMWMrMwpzTEZDUzFuODBJc3cyRlpCbm5xc3M2ZlNaS1FMam42WVhLb3NjY1hSa21HcSt6YU9UUjVTdHA3MThxRkd0aEs3CmZ1N1g3VHkyZGVsekFFb0VYMUtSN1VoRGlzMFVuWlJrdDFMbnRFZWMxeS92aHo2QTRMZk9KN01yR2JFeENHVmUKdStKaFlwUFlSZXYzUHpJSmRmSEtML3BodzN2VEtWMVVyVVZLemwwTjhGaTZJd2RmRkpVSW5QV3BoWHVZbC9ZbgpYSTQrKzVxcE94Z0JGR092Q2Z3QmdTOWxyNzZ0dHM1dUlCN0ZsaTZ4MzJJRUFLYzV1WHhYV0tubWk5aUxEV29oCjc1VUdUMGlxanAxMjROVnU2MzJiM2l3eWVaZzN2bGViRm5idWhidXJTVFlENy9KczFncDNXcmgrNkxXa0ZTWGUKYUtXVi9JRUNnWUVBK3dBWGw3UGxtVHNETnZIUjFDdDRrNTYxSGltRXh2RE1yTW1VRzMwL1ZYdVpMM1Z1TGdFYgpad2ZWMzQwaTFyb3hQTjFZMG5kKzgzMVhybUh5VkxnSWs4V3hSc3dPTUQ3MWxDcmVaNHJGYjd0dGFlaXAvT0IwCkpsdytkWmFtS3ZsNEVLcGVYaG5LUFJDZGZBZFkvSDR1VEZCZkJpUkE1eHA4bDhWd0x4RFlCOUVDZ1lFQStuTUgKdUxUY2lFZjQ0dVJ0a0M1NWlNUUgvbkdOVTIxck54VlRTT0YxWlBiclR1cWk1dkc0MHpzMEYzSUhnaUxWdzR3egp2MjY3ZS9HMmx3RjI1ZmJXU0lsUU9LZ0JJOTI4cExGTzRSRHNieExHUC9Ja0RqK3U0RTBkbFZzUVVmeTRqcEVWCkxTeHBEdExhaGlGVWdPL0hTeG9UMmw4SEJ6NFlhZWVDTnF3bUlaa0NnWUJSR3htRWlyd0JSS0ZvU3NHcjFwUXkKMTFEZE96dE5jWmdocVUxemlJaERuaG5FelNSYU56OWNqcHFjanlXWHp6aUQyMTZOTzlISTZsSy81YVNCbmFvZgozZnpIekw0MDl0TXlHcHdkUnlrL1RvZ3ZkZUFmOTROd3RkUDArVVlla3RncVFuTVY0eTJIaCt2cm5SQXpIcTdsCk4vOU1vOEJaTFNUZmdnd2JHVTFGVVFLQmdRQ3RsWEtobTRGS1Y0L3lPbDZSMHhSYkxYdFk2SDBLZU1rWnlZY0sKK1hEelJJeDlDdlZUV2ZBL1AwWndoWkVjcW1ZOGZYMFVUbnhWZ0llTUMvRExuSlNTZTlHRkl6Ui9GbDE4VElRZQpUQ3VESktFUml4TmdhTlVkRTNYUW9lZ2kyeVZUY3MwWm5URkhtKzduamt4U2ZWNUUrRk1RUkZMTHUwY1NoK25oCldObW82UUtCZ1FETk8zalNEVzZsbWRBc1BIQnhsa0E3STBMZGlHWUFTNmswRERnS0ZjbTJFbHRWR1RkcWFaWGMKc2ZqVWFzVU9QazAxdFpZYTdpUkdDZEdxQzAzT0ZTaTBWMUoxeURPUnFCU2x6cTBGK0lJck1tVEZwR3Q0aURmSApmaG1oQzNxb2FBWmxqVEp3Q2NVd2dScWw4dTMvaXFqMzlGR0JWRlRMTVo1Sm10R09JbVhENFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=`;
  return yaml.load(temp);
};

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  // console.log('header:', header);
  let { authorization } = header;
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};

export const getAdminAuthorization = async (header: IncomingHttpHeaders) => {
  const kubeConfig =
    process.env.NODE_ENV === 'development' ? getUserKubeConfigMock() : getUserKubeConfig();
  try {
    return Promise.resolve(JSON.stringify(kubeConfig));
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};
