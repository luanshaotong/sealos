import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from '@kubernetes/client-node';
import yaml from 'js-yaml';
import { Base64 } from 'js-base64';

export const getUserKubeConfig = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return yaml.load(config);
};

export const getLocalAdminKubeConfig = () => {
  const config: string | undefined = process.env.ADMINTOKEN;
  // console.log('base64 config:', config);
  if (!config) {
    throw new Error('KUBECONFIG environment variable is not defined');
  }
  // console.log('config:', Base64.decode(config));
  return Base64.decode(config);
};

export const getUserKubeConfigMock = () => {
  const temp = `apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJMU1Ea3hNakF3TXpBd04xb1lEekl4TWpVd09ERTVNREF6TURBM1dqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCm9JcmFHL0JMVFRCMnhDQ3dCUkY1cDlCKzNHKzhyMUlvaHJqRWQxWjl1Y3QzWmRSbzc3Y0h1dkNCNW5BNzRaalAKZGs3RDA0N202QU5sekxFZHJlQ1RtcU9TRm9rQUkxK2p0Z0RUaW5sMSs3SWhTRGRuRTl3TWlQdEdEMUNDOFFMTwpXNElmbk93R3dVK0tvbjNZNG04emp6cmVQTDRWVEp3WXpiNGpESnhvUXNZVVlvSjBhcWhBQ2dzWFkrZjZkSTN5ClZTc2EvZVdqNVZmM3NnZm9hM2FmemNEdTZ3bEdmSFVGNzhrNGNPQTc0bHA4cHhzNERsVFd4U1VrMSswWUR4TkcKMUh3SmloTFhFcTg4ODMva1lxb3NNR0UyeWhEZ09Ga1AzUUlsbCs5dVFyT3NqcHN3cWFxM1NuMGJ1TXdueEFCUQpJODZWRDc2VVdTaVFueklUVnM1Qlp3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVaRlRlVlJKdGtDQ0VlK1Eydk8rS0swNU85QW93RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFKejRheEFocVVyc1JhV01yVkJqb3oyK3F6bmJJTm9ZeDBGZXZmZmFKR0xlWG55VQpEN3luam1GSWNZWU1xNWJEbU85RmxqZ2QyeEppeHZGQll2ajgvQVU2OVNRUXFZUUwrVXJvNGsyZGVjY09zTFdkClZkdUVyeitFaEJtOC84UGNtbS9EVzZDWWUyczVuSWNWaWZIdDFQR3NXTG5hWjI5N2x5ZW0yMW51RGowWGNCVUgKY2FJbUdUeDlaY1hlc0dYRzZWSWl4SCtYUE1sQ0xkRW1HaTlPcGRaSVR6aEdKYjZISWpCMmlyUmd2OE9LTWZTTQpaMEFLdTg4b25lSzJ0ZkZRb1IxRUNGMTVCdmRDOWpmemVNUWd4bkJlRkVyMTNlWnJ2S29LOCtmaytvYjBPVUpNCmJiOTRlZVRmUDNHenBMN29uQjZ6WXd4WGE2TjRiZDNneTViS0lHdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    server: https://192.168.31.39:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJSXFnZ3BmdG5ibW93RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TlRBNU1USXdNRE13TURkYUdBOHlNVEkxTURneE9UQXdNekF3T0ZvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRGZhb09zV2ttMlRDT0MKWUxFemN6TmFoc0xEYVlsSGdEUS9DUlR5ZmFDMFRVUkVJTDZuclB5LzJoNk5MeldIRE1scWlnRmFmVVgzYW42cQphYzUveWVLOW53d1RYZk9OeXA5M0poT20rUkJRbCtnaG9ueExGTWtNalZsb2ZDZ3NqUHNPdXp3WmRvN1ZZeFVYCklGRGU1QTVvc3lZUkRzVmluTTAxRFQySWxkRUQ3NDNKdGpNRXdBdUJvM3F2SHZrWHc4RmJ0aTdYMTlwS1VwbTEKaTN0S2F1YzVGZ3RRdEM2UjhNaVhpQVQyQ1VPeDdWdmVIL05LWFVuNE1Vcmg1eTg3YTNnK2xyQit2M1BuWk9pcgppeFgwWmR3MGRYOFdWQzRQN0l3bkRhdmpDSlpjY1VYSE8rdDI3bXlxeTh2YkplTHhaNFdaUTNtSUJOUkNFUlcvClRoeFJZWWUzQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlJrVk41VkVtMlFJSVI3NURhODc0b3JUazcwQ2pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFZaTRjRVhnQXlCd3ZaSnVMdFpWVllmRk9adjVvMWl4VWhXdml3YTVyUGJlV0hnTzhrT3N4Ci81bFdDRDhiVVNaUnB5dHhEOXFDaWZMUGFPbGFVdnJGVHlSSnVwKzZ1dGFhUzEvYU11ZkxYSytTN0JZbU0zdTIKcVRXUHdQTFA2UVRVMXdPeHZlTEZ1MnRkeGRYci9ORzZ6ZjFMcTJpRUtCdUE2eldjUGQ2UnVuYTNvYWYyUGVyTgpiZTVpc2hQRmt1Z2xQb201dGlMMmgwLzlVNFVmVHlBUURQaTdKZHI5bmRRMGtrSjczLzRUdS9UWE8yQ1BwdjUvCktJUkJ2NEV6ZmVWNHJ0c0tIVmhEZlFCckdwbm93ZWxnYmppN01HZEVSN2FiT0h6R29QUUFvaXBJK2RhOVVKY2MKZkFVN0UyeVIxRXlKeCtFQThHc0dLaGxTOXpKS09aK2FRZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMzJxRHJGcEp0a3dqZ21DeE0zTXpXb2JDdzJtSlI0QTBQd2tVOG4yZ3RFMUVSQ0MrCnA2ejh2OW9lalM4MWh3ekphb29CV24xRjkycCtxbW5PZjhuaXZaOE1FMTN6amNxZmR5WVRwdmtRVUpmb0lhSjgKU3hUSkRJMVphSHdvTEl6N0RyczhHWGFPMVdNVkZ5QlEzdVFPYUxNbUVRN0ZZcHpOTlEwOWlKWFJBKytOeWJZegpCTUFMZ2FONnJ4NzVGOFBCVzdZdTE5ZmFTbEtadFl0N1Ntcm5PUllMVUxRdWtmRElsNGdFOWdsRHNlMWIzaC96ClNsMUorREZLNGVjdk8ydDRQcGF3ZnI5ejUyVG9xNHNWOUdYY05IVi9GbFF1RCt5TUp3MnI0d2lXWEhGRnh6dnIKZHU1c3FzdkwyeVhpOFdlRm1VTjVpQVRVUWhFVnYwNGNVV0dIdHdJREFRQUJBb0lCQVFEZGJOcXRvaHAyVTRYSgovUDBDNmdVV2pvTlBXelNVcWNxZVF1a0E0R082N3UxZXZEbFpROGlJZUt4WTcxWVUwQ1o3c2VWZmd0TXFRT0RqCkV0UjNzR1pKMnUwRDhOU25UZyszN2dRQ004em9vM1dNaUZhNXJ4TUhucnZqSTFKSnZUeEJ3RzN6S3A2cmZIVDEKbzdDakI5SUVFTElFcStnVE1TYnNrbi9POC9UZytOd0NiTFR3ajRUYXE1M1kyRyt1S1NPVEs5d3NlL3dLeUZzWAo1dlNOVzdMMDlJTFUwcm1pYi9BR1h2cERvam9XTC9UUFVtb3gyTDNJOHVpUEtoR2o0QU55N0JCNS9FaXZGbEgrCitNdnBWeWtBQ1ptOG9mSGowY1VSblArRWUyQmJOeVFJMEJ4aVRXMHQzQjBxclpkSllFTmFIdSs0UmFZMmI0VCsKTXphcmZQN1JBb0dCQU9ndktPckNMK2twVkNOL1VRWEZnZHAvamhVdzdleUZ6VEZjZUFZNXF4R00vczlzMzVlNwp4N0tQRy84VmljZ285N3hHaEtEMXljUENtOEJjam1pTTByYnNodVMvei9pSkxPNVE4dHQ4T2VjTnQvWUV4MlhYCnJGSTRGWnNDQnlMaUNCRnQ2cFgrQU01Vnl5bkt3aGdodDhUQjlqU25Rak00WnFtdkR0aTBtZ2taQW9HQkFQWlYKSFc4dDdhNzVZYTl5VnpGWDUvSkQwYjJqQk9hcWxPL1dYOEZlTS9qWGg3RTFyR3JrN1NRT0M5UXNzb1lOZjJwbApMa0p4SVo0c2VCYnhEM0xpMGdod0ZhZXd4bmxQS0sxdEhKc04vaFJVakVFUVZsYTEvT20vK3Yxb0xtWUFJRGprCnRxUDhVUVk3Vk9Ea3JuNzVBazhlOEI3b0UreXczbmdxRmVhTElLRlBBb0dBYnJaZUdtTHlHWW45ZHRlMHVMM1AKQjNNZk92ZVQyOTZKVTJvMlNUR2lZc0lLbHJuaGZDYXNPSGFJOFA5Q0xkRnJIN200Y0ZBREgzZGljVDB4SXFWVApyS25vUUpjK0FkTFhPK1FaaVpNWXdSWUhqQ1lITm9hNndwRy9xNlF4NXU1RXpwck02eXl0RWJaVEkrQnM0TGpqCk9jMExLMXc5OHRLSUVZMUoxUWQ1RTdFQ2dZRUF0WEZTWWY5UmtNMnVMMzRvVFhjenFSWmRXckxHUEdXdm1NMnQKOEkvRDltcERUN3Q2U2E1Z0ltdWFPT25IZ2NoVmJ2Z2lUOXhtNTh4WGxJWnhXNjFKQ2VBTmcxeEpoVGRTZmhQZAp1elJlVDNsTGFlMXZ1eVVIcXVHM0xZcmNpbE5UYUxURzl4azJVVUhJcm5Lak9YR1BTdG8rQW5YdG55MVVZT3lXCi94N0JwUzhDZ1lFQW5MSHp2bVMvdWdzc25RcVVNSS81Um1TWHpiTUdqdE40QnBvVTdKQksvNTAwaExLL29CQkYKcUFhWCtuWUNjNjFFcUZxZUFiMnpXdTNyVzQwTWE1dWplTXdUV3JRRkFNeXFXbzNrLy9mTFJkOGZYN0ZpdENLWgpTaEZOeEhkVHZZMXZRYUY0RTVyVW10NldjUXQyZ3Y5RXFHeWFPL1JRQ1V0NGNnRm9WQnNEd0Q4PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=`;
  return yaml.load(temp);
};

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  // console.log('header:', header);
  let { authorization } = header;
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};

export const getAdminAuthorization = async (header: IncomingHttpHeaders) => {
  const kubeConfig =
    process.env.NODE_ENV === 'development' ? getUserKubeConfigMock() : getUserKubeConfig();
  try {
    return Promise.resolve(JSON.stringify(kubeConfig));
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};
